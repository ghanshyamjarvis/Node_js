const express = require("express");
const router = express.Router();
const app = express();
const connection = require("./models/db");
const route = require("./controllers/app_route");
const path = require('path');
const bodyParser = require('body-parser');
const sha1 = require('sha1');
const XRegExp = require('xregexp');
let multer = require('multer');
const DIR = './src/images';

app.use(express.static(path.join(__dirname, 'images')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');


let storage = multer.diskStorage({
  destination: function (req, file, callback) {
    callback(null, DIR);
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
  }
});
let upload = multer({storage: storage});

app.get('/', (req, res) => {
  let sql = "SELECT * FROM details";
  let query = connection.query(sql, (err, results) => {
    if (err) throw err;
    res.render('main', {
      results: results
    });
  });
});
app.get('/add', (req, res) => {
  res.render('add', {
    errors: {},
    results: {}
  });
});
app.get('/edit', (req, res) => {
  var errors = {};
  let sql = "SELECT * FROM details where student_id = ?";
  let query = connection.query(sql, req.query.student_id, (err, results) => {
    console.log(results);
    if (err) throw err;
    res.render('edit', {
      errors: errors,
      results: results[0]
    });
  });
});
//route for insert data
app.post('/add', upload.single('image'), (req, res) => {
  var errors = {};
  var check = {};
  let data = {
    student_id: req.body.student_id,
    firstname: req.body.firstname,
    lastname: req.body.lastname,
    email: req.body.email,
    password: sha1(req.body.password),
    mobile: req.body.mobile,
  };
  // console.log(data);
  //console.log(req.file);
  errors = checkempty(req.body);
  if (req.body.firstname === "" || req.body.lastname === "" || req.body.email === "" || req.body.password === "" || req.body.mobile === "" || req.body.image === "") {
    res.render('add', {
      results: req.body,
      errors: errors
    });
  } else if (!XRegExp('^[a-zA-Z]{1,10}$').test(req.body.firstname)) {
    res.render('add', {
      results: req.body,
      errors: {'firstname': 'Enter a to z limint 10 charater'}
    });
  } else if (!XRegExp('^[a-zA-Z]{1,10}$').test(req.body.lastname)) {
    res.render('add', {
      results: req.body,
      errors: {'firstname': 'Enter a to z limint 10 charater'}
    });
  } else if (!XRegExp('^[0-9]{10,10}$').test(req.body.mobile)) {
    res.render('add', {
      results: req.body,
      errors: {'mobile': 'Enter Only  numeric limit 10'}
    });
  } else if (!XRegExp('^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$').test(req.body.email)) {
    res.render('add', {
      results: req.body,
      errors: {'email': 'Fill Proper Email format'}
    });
  } else if (!XRegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})").test(req.body.password)) {
    res.render('add', {
      results: req.body,
      errors: {'password': 'password string Contain minmum 8 Charater,one lowercase charater, one uppercase charater, one special charater'}
    });
  } else if (!req.file) {
    res.render('add', {
      results: req.body,
      errors: {'image': 'Please enter proper file'}
    });
  } else {
    const sql = "select * from details where email = ?"
    connection.query(sql, req.body.email,(err, results)=>{
      if (err) throw err
      if(Object.keys(results).length > 0 ){
        check.emailnotvalid = "This email is already exits";
        res.render('add',{
          results: req.body,
          errors : check
        });
      }else{
        data.image = req.file.filename;
        let sql = "INSERT INTO details SET ?";
        connection.query(sql, data, (err, results) => {
          if (err) throw err;
            res.redirect('/');
        });
      }
    })
  }
});

function checkempty(data) {
  var errors = {};
  if (data.firstname === "") {
    errors.firstname = "Please enter First Name";
  }
  if (data.lastname === "") {
    errors.lastname = "Please enter Last Name";
  }
  if (data.email === "") {
    errors.email = "Please enter Email";
  }
  if (data.password === "") {
    errors.password = "Please enter Password";
  }
  if (data.mobile === "") {
    errors.mobile = "Please enter mobile";
  }

  return errors;
}
//route for update data
app.post('/edit', upload.single('image'), (req, res) => {
 // var check = {};
  var errors = {};
  errors = checkempty(req.body);
  let data = {
    student_id: req.body.student_id,
    firstName: req.body.firstname,
    lastName: req.body.lastname,
    email: req.body.email,
    password: sha1(req.body.password),
    mobile: req.body.mobile
  };
  //console.log("data///////////////",req.file.filename);
  if (req.body.student_id === "" || req.body.firstname === "" || req.body.lastname === "" || req.body.email === "" || req.body.password === "" || req.body.mobile === "") {
    res.render('edit', {
      results: req.body,
      errors: errors
    })
  } else if (!XRegExp('^[a-zA-Z]{1,10}$').test(req.body.firstname)) {
    res.render('edit', {
      results: req.body,
      errors: {'firstname': 'Enter a to z limint 10 charater'}
    });
  } else if (!XRegExp('^[a-zA-Z]{1,10}$').test(req.body.lastname)) {
    res.render('edit', {
      results: req.body,
      errors: {'lastname': 'Enter a to z limint 10 charater'}
    });
  } else if (!XRegExp('^[0-9]{10,10}$').test(req.body.mobile)) {
    res.render('edit', {
      results: req.body,
      errors: {'mobile': 'Enter Only  numeric limit 10'}
    });
  } else if (!XRegExp('^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$').test(req.body.email)) {
    res.render('edit', {
      results: req.body,
      errors: {'email': 'please enter valid email'}
    });
  } else {
    const sql = "select * from details where email = ?"
    connection.query(sql, req.body.email,(err, results)=>{
      if (err) throw err
      if(Object.keys(results).length > 0 ){
        //check.emailnotvalid = "This email is already exits";
        res.render('edit',{
          results: req.body,
          errors : {email : 'This email is already exits'}
        });
      }if (!XRegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})").test(req.body.password)) {
        res.render('edit', {
          results: req.body,
          errors: {'password': 'password string Contain minmum 8 Charater,one lowercase charater, one uppercase charater, one special charater'}
        });
      } else {
        if (req.file && req.file.filename) {
          data.image = req.file.filename;
          const {firstName, lastName, email, password, image, mobile, student_id} = data;
          let sql = "UPDATE details SET firstname = ?, lastname = ?, email = ?, password = ?, mobile = ?, image = ? WHERE student_id = ?";
          connection.query(sql, [firstName, lastName, email, password,  mobile, image, student_id], (err, results) => {
            console.log("update result",results);
            if (err) throw err;
            res.redirect('/');
          });
        } else {
          const {firstName, lastName, email, password, mobile, student_id} = data;
          let sql = "UPDATE details SET firstname = ?, lastname = ?, email = ?, password = ?, mobile = ? WHERE student_id = ?";
          connection.query(sql, [firstName, lastName, email, password,  mobile, student_id], (err, results) => {
            console.log("update result",results);
            if (err) throw err;
            res.redirect('/');
          });
        }
      }
    })
  }
});

//route for delete data
app.get('/delete', (req, res) => {
  let sql = "DELETE FROM details WHERE student_id = ?";
  let query = connection.query(sql, req.query.student_id, (err, results) => {
    if (err) throw err;
    res.redirect('/');
  });
});

module.exports = app;

//https://medium.com/@nitinpatel_20236/image-upload-via-nodejs-server-3fe7d3faa642
//https://www.youtube.com/watch?v=zyHkexA4ZBw
